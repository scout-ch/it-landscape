---
import { client } from "../../.tina/__generated__/client.js";
import Layout from "../layouts/Layout.astro";
import { ServiceConnectionEdges } from "../../.tina/__generated__/types";

import Search from "../components/Search";
import { formatDate } from "../utils";

const serviceResponse = await client.queries.serviceConnection();
// @ts-ignore
const serviceEdges: ServiceConnectionEdges[] = serviceResponse.data.serviceConnection.edges || [];

const now = new Date();

const services = serviceEdges.map((service: ServiceConnectionEdges) => {
  const lifecycle = service.node?.lifecycle || [];

  // Find the most recent lifecycle entry that is NOT in the future
  const currentLifecycle = lifecycle
    .filter(entry => new Date(entry.date) <= now)
    .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())[0];

  const status = currentLifecycle?.state || "unknown";
  const productOwner = service.node?.product_owner?.name;
  const dateString: string = formatDate(service.node?.last_updated)

  return {
    id: service.node?.id,
    name: service.node?.name,
    status: status,
    product_owner: productOwner,
    criticality: service.node?.criticality,
    lastUpdated: dateString
  };
});
---

<Layout title="Services">
  <main class="container mx-auto p-5 text-lg">
    <h1 class="mb-4 mt-5 text-4xl font-extrabold leading-none tracking-tight md:text-5xl lg:text-6xl text-neutral-800">Services</h1>

    <Search client:load searchList={services} />
  </main>
</Layout>
