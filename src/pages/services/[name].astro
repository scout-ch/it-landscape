---
import { getCollection, getEntry } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import Markdown from "../../Markdown.astro";
import { getEntries } from "astro:content";

export async function getStaticPaths() {
  const services = await getCollection("service");

  return services.map((service) => ({
    params: {
      name: service.id,
    },
    props: service.data,
  }));
}

const service = Astro.props;
const lastUpdated = new Date(service.last_updated).toLocaleDateString("de");
const productOwner = service.product_owner && (await getEntry(service.product_owner));
const relations = []; // service.relations && (await getEntries(service.relations));
const involved_parties = []; //service.involved_parties && (await getEntries(service.involved_parties));
---

<Layout title={service.name}>
  <main class="container mx-auto py-10">
    <a class="text-brombeer underline hover:font-medium" href={'/it-landscape/services/'}>
      back
    </a>
    <article class="bg-white shadow-md rounded-xl p-10 max-w-4xl mx-auto">
      <h1 class="text-5xl font-extrabold">{service.name}</h1>
      <span class="block text-sm mb-3">Letztes Update dieser Daten: {lastUpdated}</span>
      <Markdown content={service.description}/>

      <div class="columns-3 mt-3 gap-1">
        <dl>
          <dt class="font-bold">Criticality</dt>
          <dd>
            <span class:list={['px-1.5', 'py-0.5', 'rounded', {'bg-red-400': service.criticality == 'high'}, 
                              {'bg-orange-200': service.criticality == 'medium'},
                              {'bg-blue-200': service.criticality == 'low'},]}>
              {service.criticality || '-'}
            </span>
          </dd>
        </dl>
        <dl>
          <dt class="font-bold">Product Owner</dt>
          <dd>
            {productOwner?.data?.name || '-'}
          </dd>
        </dl>
        <dl>
          <dt class="font-bold">Development</dt>
          <dd>
            {service.development || '-'}
          </dd>
        </dl>
        <dl>
          <dt class="font-bold">Operations</dt>
          <dd>
            {service.operations || '-'}
          </dd>
        </dl>
        <dl >
          <dt class="font-bold">SLA</dt>
          <dd>
            {service.has_sla ? 'true' : 'false'}
          </dd>
        </dl>
      </div>

      <dl class="mt-3">
        <dt class="font-bold">Steckbrief</dt>
        <dd>
          <Markdown content={service.strategy_reference}/>
        </dd>
      </dl>

      <dl class="mt-3">
        <dt class="font-bold">Links</dt>
        <dd>
          <ul class="list-disc ps-5">
            {
              service.links?.map((link) => (
                <li>
                  <a class="text-brombeer hover:underline" href={link!.url} target="_blank">
                    {link!.label}
                  </a>
                </li>
              ))
            }
          </ul>
        </dd>
      </dl>

      <dl class="mb-4 mt-3">
        <dt class="font-bold">Abh√§ngigkeiten</dt>
        <dd>
          <ul class="list-disc ps-5">
            {
              relations?.map(async (relation) => {
                const relatedService = relation.related_service && (await getEntry(relation.related_service));
                return (
                  <li>
                    {relation.description}:{" "}
                    <a class="text-brombeer hover:underline" href={`/it-landscape/services/${relatedService.id}`}>
                      {relatedService.name}{" "}
                    </a>
                    <span class="bg-red-100 text-red-800 text-xs font-medium mr-2 px-2.5 py-0.5 rounded">
                      {relation!.relation_criticality}
                    </span>
                  </li>
                );
              })
            }
          </ul>
        </dd>
      </dl>

      <dl class="mb-4 mt-3">
        <dt class="font-bold">Involvierte Parteien</dt>
        <dd>
          <ul class="list-disc ps-5">
            {
              involved_parties?.map((involvedParty) => {
                return (
                  <li>
                    {involvedParty!.description}:{" "}
                    <a class="text-brombeer hover:underline" href={`/it-landscape/parties/${involvedParty.key}`}>
                      {involvedParty.name}
                    </a>
                  </li>
                );
              })
            }
          </ul>
        </dd>
      </dl>

      <dl class="mb-4 mt-3">
        <dt class="font-bold">Lifecycle</dt>
        <dd>
          <ul class="list-disc ps-5">
            {
              service.lifecycle?.map((lifecycle) => {
                return (
                  <li>
                    {new Date(lifecycle.date).toLocaleDateString("de")}:{" "}
                    <span class:list={['px-1.5', 'py-0.5', 'rounded', 'text-xs', 
                              {'bg-green-200': lifecycle?.state == 'in_production'}, 
                              {'bg-orange-200': lifecycle?.state == 'in_progress'},
                              {'bg-yellow-200': lifecycle?.state == 'planned'},
                              {'bg-yellow-200': lifecycle?.state == 'idea'}]}>
                              {lifecycle?.state}
                    </span>
                  </li>
                );
              })
            }
          </ul>
        </dd>
      </dl>
    </article>
    <a class="text-brombeer underline hover:font-medium" href={'/it-landscape/services/'}>
      back
    </a>
  </main>
</Layout>
