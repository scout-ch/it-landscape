---
import Layout from "../../layouts/Layout.astro";
import { client } from "../../../.tina/__generated__/client.js"
import { marked } from "marked";
import { Debug } from 'astro:components'
import { TinaMarkdown } from 'tinacms/dist/rich-text'



export async function getStaticPaths() {
  const serviceResponse = await client.queries.serviceConnection()
  return serviceResponse.data.serviceConnection.edges?.map((service) => ({
    params: {
      name: service?.node?.name
    },
    props: { service: service?.node },
  }))

}


const service = Astro.props.service
---

<Layout title={service.name}>
  <main class="container mx-auto py-10">
    <article class="bg-white shadow-md rounded-xl p-10 max-w-4xl mx-auto">
      <h1 class="text-5xl font-extrabold">{service.name}</h1>
      <span class="block text-sm mb-3"
        >Leztes Update dieser Daten: {
          new Date(service.last_updated).toLocaleDateString("de-CH", {
            year: "numeric",
            month: "long",
            day: "numeric",
          })
        }</span
      >
      <Debug values={service.description}></Debug>
      <TinaMarkdown content={service.description}/>
      <!-- <div set:html={marked.parse(service.description)} /> -->

      <dl class="mb-4 mt-3">
        <dt class="font-bold">Links</dt>
        <dd>
          <ul class="list-disc ps-5">
            {
              service.links.map((link) => (
                <li>
                  <a class="text-brombeer hover:underline" href={link.url}>
                    {link.label}
                  </a>
                </li>
              ))
            }
          </ul>
        </dd>
      </dl>

      <!-- <dl class="mb-4 mt-3">
        <dt class="font-bold">Steckbrief</dt>
        <dd set:html={marked.parse(service.strategy_reference)} />
      </dl> -->

      <dl class="mb-4 mt-3">
        <dt class="font-bold">Abh√§ngigkeiten</dt>
        <dd>
          <ul class="list-disc ps-5">
            <!-- {
              service.relations?.map((relation) => {
                const relatedService = services.get(relation.service);
                return (
                  <li>
                    {relation.description}:{" "}
                    <a class="text-brombeer hover:underline" href={`/it-landscape/services/${relatedService.id}`}>
                      {relatedService.name}
                    </a>
                    <span class="bg-red-100 text-red-800 text-xs font-medium mr-2 px-2.5 py-0.5 rounded">
                      {relation.relation_criticality}
                    </span>
                  </li>
                );
              })
            } -->
          </ul>
        </dd>
      </dl>

      <dl class="mb-4 mt-3">
        <dt class="font-bold">Involvierte Parteien</dt>
        <dd>
          <ul class="list-disc ps-5">
            <!-- {
              service.involved_parties?.map((involvedParty) => {
                const party = parties.get(involvedParty.party);
                return (
                  <li>
                    {involvedParty.description}:{" "}
                    <a class="text-brombeer hover:underline" href={`/it-landscape/parties/${party.id}`}>
                      {party.name}
                    </a>
                  </li>
                );
              })
            } -->
          </ul>
        </dd>
      </dl>
    </article>
  </main>
</Layout>
