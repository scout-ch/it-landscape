---
import { getCollection } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import { beautifyString } from "../../utils";
import type { CollectionEntry } from "astro:content";

export async function getStaticPaths() {
  const variants = ["criticality", "status", "product_owner", "strategy_reference"];

  return variants.map((variant) => ({
    params: {
      variant: variant,
    },
    props: { variant: variant },
  }));
}

const services = await getCollection("service");
const variant = Astro.props.variant || "criticality";
const buckets = services.reduce((acc, service) => {
  const serviceWithStatus = { ...service.data, status: service.data.lifecycle?.[0]?.state };
  const bucket = serviceWithStatus[variant] || "Unknown";

  if (!acc[bucket]) {
    acc[bucket] = [];
  }

  acc[bucket].push(service);
  return acc;
}, {});

const bucketKeys = Object.keys(buckets).sort((a, b) => {
  let order = {};

  if (variant === "status") {
    order = {
      "In Production": 1,
      "In Development": 2,
      "In Planning": 3,
      Unknown: 4,
    };
  } else if (variant === "criticality") {
    order = {
      High: 1,
      Medium: 2,
      Low: 3,
      Unknown: 4,
    };
  } else {
    order = {
      Unknown: 1,
    };
  }

  return (order[a] || 5) - (order[b] || 5) || a.localeCompare(b);
});
---

<style>
  tr:nth-child(even) {
    background-color: rgba(82, 29, 58, 0.2);
  }
</style>

<Layout title="Bucket">
  <main class="container mx-auto p-5 text-lg">
    <h1
      class="mb-4 mt-5 text-4xl font-extrabold leading-none tracking-tight md:text-5xl lg:text-6xl text-neutral-800"
    >
      Bucket View
    </h1>

    <div class="mb-4 flex items-center justify-between">
      <div class="flex items-center space-x-2">
        <label class="text-lg font-medium">Sort by:</label>
        {
          ["criticality", "status", "product_owner", "strategy_reference"]
            .sort()
            .map((bucket) => (
              <button
                id="bucket-filter"
                data-value={bucket}
                class={`rounded-md border border-gray-300 p-2 ${variant === bucket ? "bg-gray-300 font-bold" : "bg-white"}`}
              >
                {beautifyString(bucket)}
              </button>
            ))
        }
      </div>
    </div>

    <div class="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3">
      {
        bucketKeys.map((bucket) => (
          <div class="rounded-lg bg-white p-5 shadow-md" id={bucket}>
            <h2 class="mb-4 text-2xl font-bold">{beautifyString(bucket)}</h2>
            <table cellpadding="7" class="table-auto">
              <thead
                style={{
                  fontWeight: "bolder",
                  borderBottom: "2px solid",
                }}
              >
                <tr>
                  <th>Name</th>
                  {variant !== "status" && <th>Status</th>}
                  {variant !== "criticality" && <th>Criticality</th>}
                  {variant !== "product_owner" && <th>Product Owner</th>}
                  <th>Last Updated</th>
                </tr>
              </thead>
              <tbody>
                {buckets[bucket].map((service: CollectionEntry<"service">) => (
                  <tr id={service.id as string}>
                    <td>
                      <a
                        class="text-brombeer hover:underscore"
                        href={`/it-landscape/services/${service.id}`}
                      >
                        {service.name}
                      </a>
                    </td>
                    {variant !== "status" && <td>{service.status}</td>}
                    {variant !== "criticality" && (
                      <td>{service.criticality}</td>
                    )}
                    {variant !== "product_owner" && (
                      <td>{service.strategy_reference}</td>
                    )}
                    <td>
                      {service.last_updated
                        ? new Date(
                            service.last_updated,
                          ).toLocaleDateString("de")
                        : "unknown"}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        ))
      }
    </div>
  </main>
</Layout>

<script is:inline>
  onClickHandler = (event) => {
    const selectedVariant = event.target.getAttribute("data-value");
    const url = new URL(window.location.href);
    url.pathname = `/it-landscape/buckets/${selectedVariant}`;
    window.location.href = url.toString();
  };

  const buttons = document.querySelectorAll("#bucket-filter");
  buttons.forEach((button) => {
    button.addEventListener("click", onClickHandler);
  });
</script>
