---
import { client } from "../../../.tina/__generated__/client.js";
import Layout from "../../layouts/Layout.astro";
import { ServiceConnectionEdges } from "../../../.tina/__generated__/types";
import { beautifyString, formatDate, getBgColorByStatus, getBgColorByCriticality } from "../../utils";
export async function getStaticPaths() {
  const variants = [
    "criticality",
    "status",
    "product_owner",
    "strategy_reference",
  ];
  return variants.map((variant) => ({
    params: {
      variant: variant,
    },
    props: { variant: variant },
  }));
}
const serviceResponse = await client.queries.serviceConnection();
// @ts-ignore
const serviceEdges: ServiceConnectionEdges[] =
  serviceResponse.data.serviceConnection.edges || [];
function compareDates(a, b) {
  return a.date - b.date;
}
const services = serviceEdges.map((service: ServiceConnectionEdges) => {
  const lifecycle = service.node?.lifecycle?.sort(compareDates) || [];
  const productOwner = service.node?.product_owner?.name;
  const dateString: string = formatDate(service.node?.last_updated);
  return {
    id: service.node?.id,
    name: service.node?.name,
    status: lifecycle[0]?.state,
    product_owner: productOwner,
    criticality: service.node?.criticality,
    strategy_reference: service.node?.strategy_reference,
    lastUpdated: dateString,
  };
});
const variant = Astro.props.variant || "criticality";
const buckets = services.reduce((acc, service) => {
  const bucket = service[variant] || "Unknown";
  if (!acc[bucket]) {
    acc[bucket] = [];
  }
  acc[bucket].push(service);
  return acc;
}, {});
const bucketKeys = Object.keys(buckets).sort((a, b) => {
  let order = {};
  if (variant === "status") {
    order = {
      in_production: 1,
      in_progress: 2,
      planned: 3,
      idea: 4,
      on_hold: 5,
      unknown: 6,
    };
  } else if (variant === "criticality") {
    order = {
      high: 1,
      medium: 2,
      low: 3,
      unknown: 4,
    };
  } else {
    order = {
      Unknown: 1,
    };
  }
  return (order[a] || 5) - (order[b] || 5) || a.localeCompare(b);
});

---

<Layout title="Bucket">
  <main class="container mx-auto p-5 text-m">
    <h1
      class="mb-4 mt-5 text-4xl font-extrabold leading-none tracking-tight md:text-5xl lg:text-6xl text-neutral-800"
    >
      Bucket View
    </h1>

    <div class="mb-4 flex items-center justify-between">
      <div class="flex items-center space-x-2">
        <label class="text-m font-medium">Sort by:</label>
        {
          ["criticality", "status", "product_owner"].sort().map((bucket) => (
            <button
              id="bucket-filter"
              data-value={bucket}
              class={`rounded-md border border-gray-300 p-2 ${variant === bucket ? "bg-gray-300 font-bold" : "bg-white"}`}
            >
              {beautifyString(bucket)}
            </button>
          ))
        }
      </div>
    </div>

    <div class="grid grid-cols-1 gap-2 md:grid-cols-2 lg:grid-cols-3">
      {
        bucketKeys.map((bucket) => (
          <div class="rounded-lg bg-white p-1 shadow-md" id={bucket}>
            <h2 class="mt-1 ml-2 mb-4 text-2xl font-bold">
              {beautifyString(bucket)}
            </h2>
            <table cellpadding="7" class="table-auto">
              <thead
                style={{
                  fontWeight: "bolder",
                  borderBottom: "2px solid",
                }}
              >
                <tr>
                  <th class="text-left px-2 py-2">Name</th>
                  {variant !== "status" && <th class="text-left">Status</th>}
                  {variant !== "criticality" && <th>Criticality</th>}
                  {variant !== "product_owner" && <th>Product Owner</th>}
                  <th class="text-left px-2 py-2">Last Updated</th>
                </tr>
              </thead>
              <tbody>
                {buckets[bucket].map((service) => (
                  <tr id={service.id as string} class="even:bg-brombeer-200">
                    <td class="px-2 py-2">
                      <a
                        class="text-brombeer hover:underscore"
                        href={`/it-landscape/services/${service.name}`}
                      >
                        {service.name}
                      </a>
                    </td>
                    {variant !== "status" && (
                      <td class="px-2 py-2">
                        <span
                          class={`p-1.5 text-xs rounded ${getBgColorByStatus(service.status)}`}
                        >
                          {service.status}
                        </span>
                      </td>
                    )}
                    {variant !== "criticality" && (
                      <td class="px-2 py-2">
                        <span
                          class={`p-1.5 text-xs rounded ${getBgColorByCriticality(service.criticality)}`}
                        >
                          {service.criticality}
                        </span>
                      </td>
                    )}
                    {variant !== "product_owner" && (
                      <td class="px-2 py-2">{service.product_owner}</td>
                    )}
                    <td class="px-2 py-2">{service.lastUpdated}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        ))
      }
    </div>
  </main>
</Layout>

<script is:inline>
  onClickHandler = (event) => {
    const selectedVariant = event.target.getAttribute("data-value");
    const url = new URL(window.location.href);
    url.pathname = `/it-landscape/buckets/${selectedVariant}`;
    window.location.href = url.toString();
  };

  const buttons = document.querySelectorAll("#bucket-filter");
  buttons.forEach((button) => {
    button.addEventListener("click", onClickHandler);
  });
</script>
